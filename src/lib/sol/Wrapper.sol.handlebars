// SPDX-License-Identifier: UNLICENSED
// Compiler: {{compiler}}
// Optimizer: false
pragma solidity ^0.8.20;
{{#if structs}}
{{#each structs}}
struct {{name}} {
	{{#each fields}}
	{{this}};
	{{/each}}
}
{{/each}}
{{/if}}

/// @dev Wrapper for zipped contract {{contractName}} ({{zippedAddress}}).
contract {{contractName}} {
	address constant ZIPPED = {{zippedAddress}};

	{{#each functions}}
	function {{name}}({{params}})
		external{{#if modifiers}} {{modifiers}}{{/if}}
		{{#if returns}}
		returns ({{returns}})
		{{/if}}
	{ __forwardToZipped(); }
	{{/each}}

	function __forwardToZipped() private view {
		function () fwd = __forwardToZippedNonView;
		function () view vfwd;
		assembly ("memory-safe") { vfwd := fwd }
		vfwd();
	}

	function  __forwardToZippedNonView() private {
		assembly ("memory-safe") {
			calldatacopy(0x00, 0x00, calldatasize())
			let s := delegatecall(gas(), ZIPPED, 0x00, calldatasize(), 0x00, 0x00)
			returndatacopy(0x00, 0x00, returndatasize())
			if iszero(s) {
				revert(0x00, returndatasize())
			}
			return(0x00, returndatasize())
		}
	}
}